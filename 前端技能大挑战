<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<!--1.封装函数 f，使 f 的 this 指向指定的对象-->
<script>
    //方法一
    function bindThis(f, oTarget) {
        return f.bind(oTarget);
    }
</script>
<script>
    //方法二
    /* apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.
    * Function.apply(obj,args)方法能接收两个参数
obj：这个对象将代替Function类里this对象
args：这个是数组，它将作为参数传给Function（args-->arguments）*/
    function bindThis(f,oTarget) {
        return function () {
            return f.apply(oTarget,arguments);//apply的应用，改变当前的作用域至apply(xx,arguments)中的xx，此时this指向的是xx。
        }         //apply方法是立即执行函数，所以需要放在一个函数里面，到调用的时候再立即执行。arguments是局部变量，必须在函数里才能使用。
    }
</script>

<!--2.获取 url 中的参数
1. 指定参数名称，返回该参数的值 或者 空字符串
2. 不指定参数名称，返回全部的参数对象 或者 {}
3. 如果存在多个同名参数，则返回数组-->
<script>
    //方法一
    function getUrlParam(sUrl, sKey) {
     for(;oNode1;oNode1=oNode1.parentNode){//随便找一个节点，直到某个祖先节点（或自己）包含另一个节点
         if (oNode1.contains(oNode2)){//contains()并不是字符串方法，，仅用于判断DOM元素的包含关系，参数是Element类型
             return oNode1;
         }
       }
    }
</script>
<script>
    //方法二
    function commonParentNode(oNode1, oNode2) {
       if (oNode1.contains(oNode2)){//在一开始oNode1就不包含于oNode2，那在递归的时候oNode1的父节点也肯定不包含于oNode2。
          return oNode1;
       }else{
           return commonParentNode(oNode1.parentNode,oNode2)
    }
    }
</script>


<!--3.如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1
否则如果字符 Unicode 编码 > 255 则长度为 2-->
<script>
    function strLength(s, bUnicode255For1) {
       if (bUnicode255For1){
           return s.length;
       }else {
           var len=s.length;
           for (i=0;i<len;i++){
              if (s.charCodeAt(i)>255){//charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数。
                  len++;    //Unicode 字符代码是一个字母的数字 (如数字 "97" 代表字母 "a")。
              }//方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。
           }
           return len;
       }
    }
    /*onkeypress 事件会在键盘按键被按下并释放一个键时发生。
提示：与 onkeypress 事件的关联的事件发生次序:
onkeydown
onkeypress
onkeyup
注意： 在所有浏览器中 onkeypress 事件不是适用于所有按键(如： ALT, CTRL, SHIFT, ESC)。
监听一个用户是否按下按键请使用 onkeydown 事件,所有浏览器都支持 onkeydown 事件。*/
</script>


<!--4.根据包名，在指定空间中创建对象
输入描述:
namespace({a: {test: 1, b: 2}}, 'a.b.c.d')
输出描述:
{a: {test: 1, b: {c: {d: {}}}}}-->
<script>
    //方法一
    function namespace(oNamespace, sPackage) {
     var arr=sPackage.split('.');//split() 方法用于把一个字符串分割成字符串数组
     var res=oNamespace;//保留对原始对象的引用
     var len=arr.length;
     for (var i=0;i<len;i++){
         if (arr[i]in oNamespace){//空间名在对象中
             if (typeof oNamespace[arr[i]]!=='object'){//则为原始值
                 oNamespace[arr[i]]={};//将属性设置为空对象
             }
         }else {//空间名不在对象中，建立此空间名属性，赋值为空
             oNamespace[arr[i]]={};
         }
         oNamespace=oNamespace[arr[i]];//将指针指向下一个空间名属性
     }
     return res;
    }
</script>
<script>
    //方法二：递归
    function namespace(oNamespace, sPackage) {
      if (sPackage.length<=0)return;
      var pointer=oNamespace;
      if (sPackage[0]in oNamespace){
          if (typeof oNamespace[sPackage[0]]!=="object"){//typeof操作符返回一个字符串，表示未经计算的操作数的类型。
             oNamespace[sPackage[0]]={};
          }
      }else {
          oNamespace[sPackage[0]]={};
      }
     oNamespace=oNamespace[sPackage[0]];
     namespace(oNamespace,sPackage.slice(2));//命名空间
     return pointer;
    }
</script>

<!--5.用 JavaScript 实现斐波那契数列函数,返回第n个斐波那契数。 f(1) = 1, f(2) = 1 等
斐波那契数列:以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=3，n∈N*）-->
<script>
    //方法一:递归
    function fibonacci(n) {
      return n<=2?1:fibonacci(n-1)+fibonacci(n-2);
         //条件表达式？表达式1：表达式2。
        // 说明：问号前面的位置是判断的条件，判断结果为bool型，为true时调用表达式1，为false时调用表达式2。
    }
</script>
<script>
    //方法二
    function fibonacci(n) {
     if (n==1||n==2){
         return 1;
     };
      return fibonacci(n-1)+fibonacci(n-2);
    }
</script>


<!--6.统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率
1. 不限制 key 的顺序
2. 输入的字符串参数不会为空
3. 忽略空白字符
输入
'hello world'
输出
{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}-->
<script>
    //方法一
    function count(str) {
        var obj = {};
        str.replace(/\S/g, function (s) {
            !obj[s] ? obj[s] = 1 : obj[s]++;
        })
        return obj;
    }
</script>











</body>
</html>
