<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<!--13.为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组-->
<script>
    //方法一
    function square(arr) {
      return arr.map(function (item,index,arr) {//map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
          return item*item;                 //map() 方法按照原始数组元素顺序依次处理元素。
      })
    }
</script>
<script>
    //方法二
    function square(arr) {
        var a=[];
        arr.forEach(function (x) {
            a.push(x*x);
        });
        return a;
    }
</script>

<!--14.在数组 arr 中，查找值与 item 相等的元素出现的所有位置-->
<script>
    //方法一
    function findAllOccurrences(arr, target) {
        var c=[];
        for (var i=0;i<arr.length;i++){
            if (target==arr[i]){
                c.push(i);
            }
        }
        return c;
    }
</script>
<script>
    //方法二
    function findAllOccurrences(arr,target) {
        var s=[];
        arr.filter(function (item,index) {
            return item===target&&s.push(index);
        });
        return s;
    }
</script>
<script>
    //方法三
    function findAllOccurrences(arr, target) {
      var x=[];
      arr.forEach(function (item,index,arr) {
          target===item?x.push(index):0;
      });
        return x;
    }
</script>

<!--15.给定的 js 代码中存在全局变量，请修复-->
<script>
    //题目
    function globals() {
        myObject = {
            name : 'Jory'
        };

        return myObject;
    }
    //解答
    function globals() {
        var myObject = {
            name : 'Jory'
        };

        return myObject;
    }
</script>

<!--16.请修复给定的 js 代码中，函数定义存在的问题-->
<script>
    //题目
    function functions(flag) {
    if (flag) {
        function getValue() { return 'a'; }
    } else {
        function getValue() { return 'b'; }
    }

    return getValue();
    }
    //解答一
    function functions(flag) {
        var getValue =null;
        if (flag) {
            getValue=function(){ return 'a'; }
        } else {
           getValue=function(){ return 'b'; }
        }

        return getValue();
    }

    //解答二:else中的语句相当于将if中的function重写.
    //因此无论flag为何值，返回的方法始终为重写后的方法。将方法赋值给一个变量，方法就不会被重写，因此才能得到正确的结果。
    function functions(flag) {
        if (flag){
            var getValue=function(){return 'a';}
        }else {
            var getValue=function(){return 'b';}
        }
        return getValue();
    }
</script>

<!--17.修改 js 代码中 parseInt 的调用方式，使之通过全部测试用例-->
<script>
    //题目
    function parse2Int(num) {
        return parseInt(num);
    }
//解答一
    function parse2Int(num) {
        return parseInt(num,10);//按十进制处理字符串，遇到非字符串的，会将后面全部无视。
    }//如果 string 以 "0x" 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。
//如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。
    // 如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。

    //解答二
    function parse2Int(num) {
        return parseInt(parseFloat(num));//parseFloat() 函数可解析一个字符串，并返回一个浮点数
    }//该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。
</script>

<!--18.判断 val1 和 val2 是否完全等同-->
<script>
    //方法一
    function identity(val1, val2) {
        return val1===val2;
    }
</script>
<script>
    //方法二
    function identity(val1,val2) {
     if (val1===val2){
         return true;
     }return false;
    }
</script>
</body>
</html>
