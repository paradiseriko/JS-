<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>两个数组的交集 II</title>
</head>
<body>
<!--给定两个数组，编写一个函数来计算它们的交集。

示例 1:
输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2,2]
示例 2:
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [4,9]
说明：
输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
我们可以不考虑输出结果的顺序。-->


<script>
    /**
     * @param {number[]} nums1
     * @param {number[]} nums2
     * @return {number[]}
     */
    //方法一
    /*交集是指两个数组有多少相同的元素，可以重复
    * 不是数轴上的交集
    * 不是两个数组的合并
    * 不是两个数组合并去重
    * 比如：[4, 4, 4] 和 [4, 4] 在这里的交集是 [4, 4]！*/
    var intersect = function(nums1, nums2) {
        const res=[];
        const  map={};
        for (i=0;i<nums1.length;i++){
            const  val=map[nums1[i]];
            map[nums1[i]]=!val?1:val+1;
        };
        for (i=0;i<nums2.length;i++){
            if (map[nums2[i]]){
               res.push(nums2[i]);
               map[nums2[i]]-=1;
            };
        };
        return res;
    };


    //方法二 保证迭代长度较小的那个数组
    var intersect = function(nums1, nums2) {
        const  res=[];
        if (nums1.length>nums2.length)[nums1,nums2]=[nums2,nums1];
        nums1.forEach(item=>{
            const index=nums2.indexOf(item);
            if (index>-1){
               res.push(item);
               nums2.splice(index,1);
            };
        });
        return res;

    };


    //方法三 排序 双指针
    var intersect = function(nums1, nums2) {
        const sortFunc=(pre,cur)=>pre-cur;
        nums1.sort(sortFunc);
        nums2.sort(sortFunc);
        const res=[];
        let i=0;j=0;
        while (i<nums1.length&&j<nums2.length){
              const item1=nums1[i];
              const item2=nums2[j];
              if (item1>item2){
                  j+=1;
              }else if (item2>item1){
                  i+=1;
              }else {
                  res.push(item1);
                  i+=1;
                  j+=1;
              };
        };
        return res;
    };
</script>


</body>
</html>
