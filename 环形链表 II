
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>环形链表 II</title>
</head>
<body>
<!--环形链表 II
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

说明：不允许修改给定的链表。

示例 1：
输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。

示例 2：
输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点。

示例 3：
输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。-->

<script>
    /*1、首先，先判断该单链表是否存在循环链表？用两个快慢指针（fast、slow）分别指向链表的头部，fast 每次移动两步，slow 每次移动一步，fast 移动的步数是 slow 的两倍。
2、当 slow 与 fast 发生重合的时候，则存在链表。（slow 遍历完单链表一遍，fast 遍历了单链表两遍，2 倍的关系，如果 pos = 0 时，正好在头结点重合）。
3、如果 pos > 0 的时候。也就是说单链表中存在环，slow 到与 fast 指针重合的地方走过的路径为 n，fast 走过的路径是 slow 的两倍也就是 2n 。如果此时让 fast 每次走一步，走 n 步之后还会回到重合点。
当 fast 指针和 slow 指针重合时，声明一个 q 指针来计算到环结点的距离，因为 fast 改为每次移动一步，且 q 也要移动一步，fast 与 q 重合的地方就是环的接入点。（因为 slow 走过的路径和 fast 走过的路径相同，其中不重合的地方就是接入点）
*/
    /**
     * @param {ListNode} head
     * @return {ListNode}
     */
    var detectCycle = function(head) {
      if (head==null||head.next==null){
          return null;
      };
      let fast=head;
      let slow=head;
      while (fast!==null&&fast.next!==null){
           fast=fast.next.next;
           slow=slow.next;
           //查找接入点
           if (fast==slow){
              slow=head;
              while (slow!==fast){
                   fast=fast.next;
                   slow=slow.next;
              };
              return slow;
           };
      };
        return null;
    };

</script>


</body>
</html>
