<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<!--37.将函数 fn 的执行上下文改为 obj，返回 fn 执行后的值-->
<script>
    //方法一
    function alterContext(fn, obj) {
    return fn.bind(obj)();//bind()绑定函数，该方法可传入两个参数，第一个参数作为this，第二个及以后的参数则作为函数的参数调用
        //.bind()返回一个函数，所以需要立刻执行。
    }
</script>
<!--在JavaScript中，函数是一种对象，其上下文是可以变化的，对应的，函数内的this也是可以变化的.
函数可以作为一个对象的方法，也可以同时作为另一个对象的方法，可以通过Function对象中的call或者apply方法来修改函数的上下文.
函数中的this指针将被替换为call或者apply的第一个参数。
将函数 fn 的执行上下文改为 obj 对象，只需要将obj作为call或者apply的第一个参数传入即可。-->
<script>
    //方法二
    function alterContext(fn, obj) {
      return fn.call(obj,obj);//第一个obj是为了修改执行上下文，第二个是作为fn执行参数
    }
</script>
<script>
    //方法三
    function alterContext(fn, obj) {
        return fn.apply(obj);//只用一个obj也可以，因为题目要求改变函数的执行上下文，相当于obj拥有这个方法
    }
</script>


<!--38.给定一个构造函数 constructor，请完成 alterObjects 方法，将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量。-->
<!--访问一个对象的方法或者是属性，首先会在该对象中寻找，如果找到则返回，如果没找到，则在其原型链上面向上寻找，直至基原型，如还未找到，则返回undefined。
将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量，只需要在constructor的原型上面添加greeting属性，并指定值。-->
<script>
    function alterObjects(constructor, greeting) {
     constructor.prototype.greeting=greeting;
    }
</script>


<!--39.找出对象 obj 不在原型链上的属性(注意这题测试例子的冒号后面也有一个空格~)
1、返回数组，格式为 key: value
2、结果数组不要求顺序-->
<script>
    //方法一
    function iterate(obj) {
    var arr=[];
    for (var key in obj){//for...in循环对象的所有枚举属性。
       if (obj.hasOwnProperty(key)){//判断key是否为对象本身的属性，hasOwnProperty()方法来忽略继承属性。
           arr.push(key+": "+obj[key]);//将属性和值按格式存入数组
       }//key是自己定义的变量，而不是对象中的属性，通过变量访问属性时需要用方括号法，不能使用点表示法.
     }
        return arr;
    }
</script>
<script>
    //方法二
    function iterate(obj) {//Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。
     return Object.getOwnPropertyNames(obj).map(function (key) {//map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值
         return key+": "+obj[key];
     });
    }
</script>


<!--40.给定字符串 str，检查其是否包含数字，包含返回 true，否则返回 false-->
<script>
    //方法一
    //判断字符串中是否含有数字，可以用正则表达式。/\d/可以匹配字符串中的数字字符，用test方法可以检测。
    function containsNumber(str) {
     var b=/\d/;
     return b.test(str);
    }
</script>




















</body>
</html>
