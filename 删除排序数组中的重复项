<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>删除排序数组中的重复项</title>
</head>
<body>
<!--给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1:
给定数组 nums = [1,1,2],
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
你不需要考虑数组中超出新长度后面的元素。
示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
}-->

<script>
    /**
     * @param {number[]} nums
     * @return {number}
     */
    //给定的数组 nums 是一个排过序的数组，那么，重复元素一定是在数组中相邻的元素。
    // 也就是说，我们可以通过遍历数组，找出相邻相同项，并将其从数组中移除即可
    //需要原地删除，那么我们就不能创建一个副本，而是只能在原数组上进行操作
    var removeDuplicates = function(nums) {
        for (i=0;i<nums.length-1;i++) {//遍历数组
             if (nums[i]==nums[i+1]){//找出相等的相邻两项
                nums.splice(i,1);//移动元素并向前移动一位指针
                i--;//注意移除了元素后，数组的值就被更新了，所以我们需要把 i 减一，以确定不会跳位
             };
        };
        return nums.length;//返回修改后数组的新长度
    };
</script>


</body>
</html>
