<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>两个数组的交集</title>
</head>
<body>
<!--给定两个数组，编写一个函数来计算它们的交集。

示例 1:
输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2]
示例 2:
输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [9,4]
说明:
输出结果中的每个元素一定是唯一的。
我们可以不考虑输出结果的顺序。-->

<script>
    /**
     * @param {number[]} nums1
     * @param {number[]} nums2
     * @return {number[]}
     */
    //方法一
    var intersection = function(nums1, nums2) {
        const  set=new Set(nums1);//Set对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。
        // Set()如果传递一个可迭代对象，它的所有元素将不重复地被添加到新的 Set中。如果不指定此参数或其值为null，则新的 Set为空。
        const res=new  Set();
        nums2.forEach(item=>{
            if (set.has(item))res.add(item);//set.has()返回一个布尔值来指示对应的值value是否存在Set对象中。
        });
        return [...res];//对象中的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中
    };

    /**
     * @param {number[]} nums1
     * @param {number[]} nums2
     * @return {number[]}
     */
    //方法二
    var intersection = function(nums1, nums2) {
        return [...new Set(nums1.filter(item=>nums2.includes(item)))];
        //filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
        //includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。
    };

</script>
</body>
</html>
