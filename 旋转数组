<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>旋转数组</title>
</head>
<body>
<!--旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:
输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释:
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:
尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的原地算法。-->

<script>
    /**
     * @param {number[]} nums
     * @param {number} k
     * @return {void} Do not return anything, modify nums in-place instead.
     */
    //方法一
    var rotate = function(nums, k) {
           const  reverse=(start,end)=>{/const 声明常量
               while (start<end){
                     const  tmp=nums[start];
                     nums[start++]=nums[end];
                     nums[end--]=tmp;
               };
           };
           if (nums){
               const last=nums.length-1;
               k=k%(last+1);
               reverse(0,last-k);
               reverse(last-k+1,last);
               reverse(0,last);
           }
    };
</script>

<script>
    //方法二
    var rotate = function(nums, k) {
        k=k%nums.length;
        for (let i=0;i<k;i++){
             let tail=nums.pop();//pop() 方法用于删除并返回数组的最后一个元素
             nums.unshift(tail);//unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度
        }
    };
</script>

<script>
    //方法三
    var rotate = function(nums, k) {
        k=k%nums.length;
        for (let i=0;i<k;i++){
           nums.splice(0,0,nums.splice(nums.length-1,1));
        }
    };
</script>

<script>
    //方法四
    var rotate = function(nums, k) {
        k = k % nums.length;
        let count = 0;
        for (let start = 0; count < nums.length; start++) {
            let cur = start;
            let prevEl = nums[start];
            do {//do...while 循环是 while 循环的变体。在检查while()条件是否为真之前，该循环首先会执行一次do{}之内的语句，
                // 然后在while()内检查条件是否为真，如果条件为真的话，就会重复do...while这个循环,直至while()为假。
                cur = (cur + k) % nums.length;
                let tmp = nums[cur];
                nums[cur] = prevEl;
                prevEl = tmp;
                count += 1;
            } while (start !== cur);
        }
    };
</script>

</body>
</html>
