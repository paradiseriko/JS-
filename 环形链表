<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>环形链表</title>
</head>
<body>
<!--给定一个链表，判断链表中是否有环。
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。

示例 1：
输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。

示例 2：
输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。

示例 3：
输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
-->

<script>
    //方法一：利用空间
    //遍历链表，对于每个节点对象，新增属性isVisited = true。同时每次遍历判断下一个节点是否拥有isVisited属性，如果有就是有环的。
    //时间复杂度O(n)
    //空间复杂度O(n)
    /**
     * Definition for singly-linked list.
     * function ListNode(val) {
     *     this.val = val;
     *     this.next = null;
     * }
     */

    /**
     * @param {ListNode} head
     * @return {boolean}
     */
    var hasCycle = function(head) {
       var cur=head;
       while (cur!=null){
          if (cur.next==null){
             return false;
          };
          if (cur.next.isCheck){
              return true;
          }else {
              cur.isCheck=true;
              cur=cur.next;
          };
       };
       return false;
    };


    //方法二：快慢指针
    //用两个指针同时遍历链表，快指针每次走两步，慢指针每次走一步。如果链表中有环，那么他们终将相遇。
    //时间复杂度O(n)
    //空间复杂度O(1)
    var hasCycle = function(head) {
         var p1=head;
         var p2=head;
         while (p2!==null&&p2.next!==null){
             p1=p1.next;
             p2=p2.next.next;
             if (p1===p2){
               return true;
             };
         };
         return false;
    };

</script>

</body>
</html>
