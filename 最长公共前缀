<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>最长公共前缀</title>
</head>
<body>
<!--编写一个函数来查找字符串数组中的最长公共前缀。
如果不存在公共前缀，返回空字符串 ""。

示例 1:
输入: ["flower","flow","flight"]
输出: "fl"
示例 2:
输入: ["dog","racecar","car"]
输出: ""
解释: 输入不存在公共前缀。
说明:
所有输入只包含小写字母 a-z 。-->

<script>
    /**
     * @param {string[]} strs
     * @return {string}
     */
    //方法一
    var longestCommonPrefix = function(strs) {
        let final="";
        if (!strs.length){
            return final;
        };
        for (let i=0;i<strs[0].length;i++){
            let reg=new  RegExp("^"+strs[0].slice(0,i+1));
             //RegExp 是正则表达式的缩写。
            //第一个参数是一个字符串，指定了正则表达式的模式或其他正则表达式。如果它是正则表达式，而不是字符串，则必须省略该参数。
            //第二个参数 是一个可选的字符串，包含属性 "g"、"i" 和 "m"，分别用于指定全局匹配、区分大小写的匹配和多行匹配。ECMAScript 标准化之前，不支持 m 属性。
            let flag=true;
            strs.forEach(str=> {
                if (!str.match(reg)) {
                //match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。
                //规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。
                    flag = false;
                };
            });
            if (flag){
                final=strs[0].slice(0,i+1);
            };
        };
        return final;
    };
</script>

<script>
    //方法二
    var longestCommonPrefix = function(strs) {
       var firstStrs=strs[0];
       var result='';
       if (!strs.length){
           return result;
       };
       for (i=0;i<firstStrs.length;i++){
           for (j=1;j<strs.length;j++){
               if (firstStrs[i]!=strs[j][i]){
                   return result;
               };
           };
           result += firstStrs[i];
       };
       return result;
    };

</script>
</body>
</html>
